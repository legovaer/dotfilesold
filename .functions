#!/usr/bin/env bash

# Mount my home assistant configuration
hass_mount() {
  if mount | grep "$HASSIO_IP" > /dev/null; then
    echo "The drive is already mounted at $HOME/hassio-volume-config"
  else
    if nc -z $HASSIO_IP $HASSIO_SSH_PORT 2>/dev/null; then
      mount_smbfs //$HASSIO_SSH_UNAME:$HASSIO_SSH_PASSWORD@$HASSIO_IP/config $HOME/hassio-volume-config
      echo "Mounted hassio config at $HOME/hassio-volume-config"
    else
      echo "$HASSIO_IP is not accessible, unable to mount!"
    fi
  fi
}

# Quickly attach to a tmux session
tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# Custom fuzzy Z functions
# Check https://github.com/junegunn/fzf/wiki/Examples#z
unalias z
z() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _last_z_args="$@"
    _z "$@"
  fi
}

zz() {
  cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf -q "$_last_z_args")"
}

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

# (EXPERIMENTAL) Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf "$@" --preview 'tree -C {} | head -200' ;;
    export|unset) fzf "$@" --preview "eval 'echo \$'{}" ;;
    ssh)          fzf "$@" --preview 'dig {}' ;;
    *)            fzf "$@" ;;
  esac
}

_fzf_complete_git() {
    ARGS="$@"
    local branches
    branches=$(git branch -vv --all)
    if [[ $ARGS == 'git co'* ]]; then
        _fzf_complete --reverse --multi -- "$@" < <(
            echo $branches
        )
    else
        eval "zle ${fzf_default_completion:-expand-or-complete}"
    fi
}

_fzf_complete_git_post() {
    awk '{print $1}'
}

# CD to the Project dir of Client A

# Function delegater for cd'ing into client directories.
_cd_client_a() { cd $HOME/GitHub/$CLIENT_A_FULL_NAME/$1 }

# Create function for client A
typeset $CLIENT_A_SLUG=_cd_client_a

# Add extra functionality for hub.
if which hub &> /dev/null; then
    repos() {
    local owner="${1?}"
    shift 1
    hub api --paginate graphql -f owner="$owner" "$@" -f query='
        query($owner: String!, $per_page: Int = 100, $endCursor: String) {
        repositoryOwner(login: $owner) {
            repositories(first: $per_page, after: $endCursor, ownerAffiliations: OWNER) {
            nodes {
                nameWithOwner
            }
            pageInfo {
                hasNextPage
                endCursor
            }
            }
        }
        }
    '
    }

    # List all repositories under the <OWNER> GitHub account.
    hub-repos() {
    repos "$@" -t | awk '/\.nameWithOwner/ { print $(NF) }'
    }

    # Create function for client A
    _client_a_repos() { hub-repos $CLIENT_A_FULL_NAME }
    _client_a_repos_funcname="${CLIENT_A_SLUG}-repos"
    typeset $_client_a_repos_funcname=_client_a_repos
fi
